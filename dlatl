const schema = Graphql.buildSchema(`
type usingwater{
name : String,
password : String,
username : String,
sex : String
}
type Person {
_id : ID
name : String
username : String
Sex : String
}
input inputusingwater {
name : String,
password : String,
username : String,
sex : String
}
type Query {
getusingwater(name : String, password : String, username : String, sex : String) : usingwater
people(name : String) : [Person]
}

type Mutation {
addusingwater(name : String, password : String, username : String, Sex : String) : usingwater
createuser(input : inputusingwater) : usingwater
}


`)





const root = {
  //홈페이지에서 값을 입력하면 이곳에서 데이터 저장
  //http://localhost:8080/graphql?query={getusingwater(name:"이곳에 입력", username:"이곳에 입력", password:"이곳에 입력", sex : "이곳에 입력"){name}}
  async getusingwater(input) {
      const token = jwt.sign({
          name: input.name
      }, "secretKey", {
          expiresIn: '1m',
          issuer: 'tokenuser',
      })
      console.log(token)
      return input
  },

  async people(input) {
      let dataArray = new Array()
      const people = await Client.find(function (err, data) {
          for (let index = 0; index < data.length; index++) {
              if (data[index].name == input.name) {
                  dataArray.push(data[index])
              }
          }
      });
      return dataArray;
  },
  //graphql 페이지에서 값을 입력하면 페이지 저장
  addusingwater: (input) => {
      console.log(input)
      const saveusingwater = new Client({ 'name': input.name, 'password': input.password, 'username': input.username, 'Sex': input.sex })
      saveusingwater.save(function (err, slience) {
          if (err) {
              console.log(err)
              res.send('update error,adawaaaa')
              return
          }
      })
      return response.redirect('main')
  },
  async createwater({ input }) {
      console.log(arraywater)
      return arraywater.push(input.name)
  }
}

app.use('/graphql', GraphqlHttp({
  schema: schema,
  rootValue: root,
  graphiql: true,
}))